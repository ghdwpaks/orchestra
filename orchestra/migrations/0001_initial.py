# Generated by Django 5.1 on 2024-08-25 15:41

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='High',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name': 'high',
                'verbose_name_plural': 'high',
            },
        ),
        migrations.CreateModel(
            name='Vid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20)),
                ('url', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name': 'vid',
                'verbose_name_plural': 'vid',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, default='사용자', max_length=50)),
                ('email', models.CharField(blank=True, default='def@def', max_length=50)),
                ('credate', models.DateTimeField(default=datetime.datetime(2024, 8, 26, 0, 41, 23, 581926))),
                ('deldate', models.DateTimeField(null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.IntegerField(blank=True, default=0, verbose_name='행동양식')),
                ('action_obj', models.IntegerField(blank=True, default=0, verbose_name='행동주체')),
                ('field_type', models.IntegerField(blank=True, default=0, verbose_name='행동주체의 필드번호. 위에서 0부터 오름차순.')),
                ('before', models.CharField(blank=True, max_length=200)),
                ('after', models.CharField(blank=True, max_length=200)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'log',
                'verbose_name_plural': 'log',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('high', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='orchestra.high')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to=settings.AUTH_USER_MODEL)),
                ('vid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='orchestra.vid')),
            ],
            options={
                'verbose_name': 'tag',
                'verbose_name_plural': 'tag',
            },
        ),
        migrations.CreateModel(
            name='TagName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lang', models.IntegerField(blank=True, default=0, verbose_name='태그언어')),
                ('name', models.CharField(blank=True, max_length=30)),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagNames', to='orchestra.tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagNames', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'tagName',
                'verbose_name_plural': 'tagName',
            },
        ),
        migrations.CreateModel(
            name='Memo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(blank=True, max_length=200)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memos', to=settings.AUTH_USER_MODEL)),
                ('vid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memos', to='orchestra.vid')),
            ],
            options={
                'verbose_name': 'memo',
                'verbose_name_plural': 'memo',
            },
        ),
        migrations.AddField(
            model_name='high',
            name='vid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='highlights', to='orchestra.vid'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_visible', models.BooleanField(default=False)),
                ('content', models.CharField(blank=True, max_length=200)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('vid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='orchestra.vid')),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comment',
            },
        ),
    ]
